---
- set_fact:
    ca_cn: "{{ ek_docker_ca_cn }}"
    remote_ca_path: "{{ ek_docker_params.tls.cacert | dirname }}"
    local_ca_path: "{{ output_dir }}/certs"

- name: Ensure certificate output directory exists on the Ansible controller
  delegate_to: localhost
  file:
    path: "{{ item }}"
    state: directory
    mode: 0770
  with_items:
  - "{{ local_ca_path }}"

- name: Generate CA key on the Ansible controller
  delegate_to: localhost
  command: openssl genrsa -out "{{ local_ca_path }}/ca-priv-key.pem" 4096
  args:
    creates: "{{ local_ca_path }}/ca-priv-key.pem"

- name: Create CA on the Ansible controller
  delegate_to: localhost
  command: >
    openssl req -new -x509 -days 3650
      -key "{{ local_ca_path }}/ca-priv-key.pem"
      -out "{{ local_ca_path }}/{{ ek_docker_params.tls.cacert | basename }}"
      -subj "/CN={{ ek_docker_ca_cn }}/C=FR"
  args:
    creates: "{{ local_ca_path }}/{{ ek_docker_params.tls.cacert | basename }}"

- name: Create Docker certificate directory
  become: true
  file:
    path: "{{ item }}"
    state: directory
    mode: 0750
    group: docker
  with_items:
  - "{{ remote_ca_path }}"

- name: Push CA certificate on the node
  become: true
  notify: restart docker
  copy:
    src: "{{ local_ca_path }}/{{ item }}"
    dest: "{{ remote_ca_path }}/{{ item }}"
  with_items:
  - "{{ ek_docker_params.tls.cacert | basename }}"
  - "ca-priv-key.pem"

- name: Create server key
  become: true
  notify: restart docker
  command: >
    openssl genrsa
      -out "{{ remote_ca_path }}/{{ ek_docker_params.tls.key | basename }}"
      4096
  args:
    creates: "{{ remote_ca_path }}/{{ ek_docker_params.tls.key | basename }}"

- name: Create server CSR
  become: true
  notify: restart docker
  command: >
    openssl req -subj "/CN={{ ca_cn }}" -new
      -key "{{ remote_ca_path }}/{{ ek_docker_params.tls.key | basename }}"
      -out "{{ remote_ca_path }}/server.csr"
  args:
    creates: "{{ remote_ca_path }}/server.csr"

- set_fact:
    ek_docker_altname: DNS:localhost,IP:127.0.0.1,IP:{{ ekara.private_ip }}

- name: Create server cnf file with private IP
  when: ekara.public_ip == ""
  become: true
  notify: restart docker
  copy:
    content: |
      extendedKeyUsage = clientAuth,serverAuth
      subjectAltName = {{ ek_docker_altname }}
    dest: "{{ remote_ca_path }}/server-extfile.cnf"
    force: true

- name: Create server cnf file with private/public IP
  when: ekara.public_ip != ""
  become: true
  notify: restart docker
  copy:
    content: |
      extendedKeyUsage = clientAuth,serverAuth
      subjectAltName = {{ ek_docker_altname }},IP:{{ekara.public_ip}}
    dest: "{{ remote_ca_path }}/server-extfile.cnf"
    force: false

- name: Create Server certificate
  become: true
  notify: restart docker
  command: >
    openssl x509 -req -days 3650
      -in "{{ remote_ca_path }}/server.csr"
      -CA "{{ remote_ca_path }}/{{ ek_docker_params.tls.cacert | basename }}"
      -CAkey "{{ remote_ca_path }}/ca-priv-key.pem"
      -CAcreateserial
      -out "{{ remote_ca_path }}/{{ ek_docker_params.tls.cert | basename }}"
      -extfile "{{ remote_ca_path }}/server-extfile.cnf"
  args:
    creates: "{{ remote_ca_path }}/{{ ek_docker_params.tls.cert | basename }}"

- name: Find certificates files
  become: true
  find:
    paths: "{{ remote_ca_path }}"
    patterns: "*.*"
  register: ek_files_to_change

- name: Modify certificates file permissions
  become: true
  notify: restart docker
  file:
    path: "{{ item.path }}"
    group: docker
    mode: 0640
  with_items: "{{ ek_files_to_change.files }}"
  no_log: true
